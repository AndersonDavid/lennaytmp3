{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["SERVER_URL","convertMp3","url","setStatusDL","a","id","substr","yturl","ytid","axios","post","console","error","setTags","data","App","useState","setUrl","statusDL","fileName","setFileName","tagArtist","setTagArtist","tagTitle","setTagTitle","tagAlbum","setTagAlbum","urlImage","setUrlImage","API","dataDL","audiofilename","file","tags","title","artist","album","trackNumber","image","saveOnMyPc","filename","window","open","e","className","placeholder","type","value","onChange","target","onClick","startDL","setTagsClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c14988b2.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst SERVER_URL = 'http://localhost:3333';\n\n\n\nasync function convertMp3(url, setStatusDL) {\n\n    let id = url.substr(32);\n    setStatusDL('Baixando o ' + id)\n\n    const yturl = {\n        ytid: id\n    }\n\n    try {\n        return await axios.post(SERVER_URL + '/sendid', yturl)\n    } catch (e) {\n        console.error(e)\n    }\n}\n\nasync function setTags(data) {\n\n    try {\n        return await axios.post(SERVER_URL + '/sendinfoaudio', data)\n    } catch (e) {\n        console.error(e)\n    }\n}\n\nfunction getFileToPC(filename) {\n\n    try {\n        window.open(SERVER_URL + '/dlmp3/' + filename);\n    } catch (e) {\n        console.error(e)\n    }\n}\n\nexport { convertMp3, setTags, getFileToPC }","import React, { useState } from 'react';\nimport * as API from './api';\nimport './App.css';\n\nfunction App() {\n  const [url, setUrl] = useState('');\n  const [statusDL, setStatusDL] = useState('');\n  const [fileName, setFileName] = useState('')\n\n  const [tagArtist, setTagArtist] = useState('');\n  const [tagTitle, setTagTitle] = useState('');\n  const [tagAlbum, setTagAlbum] = useState('');\n  const [urlImage, setUrlImage] = useState('');\n\n  async function startDL(url) {\n    let dataDL = await API.convertMp3(url, setStatusDL);\n    setStatusDL('baixou o ', dataDL.data.audiofilename);\n    setFileName(dataDL.data.audiofilename)\n\n  }\n\n  async function setTagsClick() {\n    let data = {\n      file: fileName,\n      tags: {\n        title: tagTitle,\n        artist: tagArtist,\n        album: tagAlbum,\n        trackNumber: 1,\n        image: urlImage\n      }\n    }\n\n    API.setTags(data)\n  }\n\n  function saveOnMyPc() {\n    API.getFileToPC(`${tagTitle} - ${tagArtist}.mp3`)\n  }\n\n  function delFromServer() {\n    window.open('http://localhost:3333/delfromserver')\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"form-dl\">\n        <input\n          className='input-dl'\n          placeholder=\"YouTube Link\"\n          type=\"text\"\n          value={url}\n          onChange={e => setUrl(e.target.value)} />\n\n        <button className=\"btn-dl\" onClick={() => startDL(url)}>Baixar</button>\n\n        <h3 className=\"status-dl\">{statusDL}</h3>\n      </div>\n\n      <div className=\"form-tags\">\n        <div>\n          <input type=\"text\"\n            className='input-tags left-top'\n            value={tagArtist}\n            placeholder=\"Artista\"\n            onChange={e => setTagArtist(e.target.value)} />\n          <input type=\"text\"\n            className='input-tags left-bottom'\n            placeholder=\"Titulo\"\n            value={tagTitle}\n            onChange={e => setTagTitle(e.target.value)} />\n        </div>\n        <div>\n          <input type=\"text\"\n            className='input-tags right-top'\n            placeholder=\"Album\"\n            value={tagAlbum}\n            onChange={e => setTagAlbum(e.target.value)} />\n          <input type=\"text\"\n            className='input-tags right-bottom'\n            placeholder=\"URL da Imagem\"\n            value={urlImage}\n            onChange={e => setUrlImage(e.target.value)} />\n        </div>\n\n        <button\n          className=\"btn-tag\"\n          onClick={() => setTagsClick()}>Setar</button>\n\n        <button\n          className=\"btn-tag\"\n          onClick={() => saveOnMyPc()}>Salvar</button>\n\n        <button\n          className=\"btn-tag\"\n          onClick={() => delFromServer()}>Excluir do BD</button>\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}